---
title: "Lab05"
format: html
editor: visual
theme: lux
knitr:
  opts_chunk:
    fig.width: 7.5
    fig.height: 5
    fig.align: 'center'
    message: false
---

# Setup

Load the necessary libraries

```{r}
#| label: required_packages

library(tidyverse)
library(readxl)
library(countrycode)
library(ggrepel)
library(scales)
```

# 2 Preparing the Data

## 2.1 Data Import

Import the World Bank data for GDP per capita, life expectancy, and population as three tibbles.

```{r}
#| label: data_import

gdp_data <- read_excel("data/API_NY.GDP.PCAP.KD_DS2_en_excel_v2_143214.xls", skip=3)
life_exp_data <- read_excel("data/API_SP.DYN.LE00.IN_DS2_en_excel_v2_142982.xls", skip=3)
pop_data <- read_excel("data/API_SP.POP.TOTL_DS2_en_excel_v2_144629.xls", skip=3)
```

## 2.2 Column Selection

For each tibble, retain only three columns:

- `country`: Data from the Excel columns titled “Country Name.”

- `code`: Data from the Excel columns titled “Country Code.”

- Either `gdp_per_cap`, `life_exp` or `pop`: Data for 2019 only.

```{r}
#| label: column_selection

gdp_data <- gdp_data |>
  select("Country Name", "Country Code", "2019") |>
  rename(country = "Country Name", code = "Country Code", gdp_per_cap = "2019")

life_exp_data <- life_exp_data |>
  select("Country Name", "Country Code", "2019") |>
  rename(country = "Country Name", code = "Country Code", life_exp = "2019")

pop_data <- pop_data |>
  select("Country Name", "Country Code", "2019") |>
  rename(country = "Country Name", code = "Country Code", pop = "2019")
```

## 2.3 Merge Data

Use `left_join()` to merge the three spreadsheets into a single tibble named countries containing five columns: `country`, `code`, `gdp_per_cap`, `life_exp`, and `pop`.

```{r}
#| label: merge_data

countries <- gdp_data |>
  left_join(life_exp_data, by=c('country', 'code')) |>
  left_join(pop_data, by=c('country', 'code')) |>
  select('country', 'code', 'gdp_per_cap', 'life_exp', 'pop')
```

## 2.4 Identify Non-Country Rows

Some rows in the World Bank spreadsheets represent regions rather than individual countries, such as “East Asia & Pacific (excluding high income).” To exclude these rows from the `countries` tibble, we will use the `countrycode()` function from the countrycode package. This function allows us to convert country names and country codes from one format to another (e.g., from the English name to standardized ISO 3166-1 numeric codes). A useful feature of `countrycode()` is that it returns a non-missing value only if the three-letter World Bank code belongs to a single country, for example:

```{r}
#| label: identify_non_country_rows

countries_filtered <- countries |>
  mutate(code_2 = countrycode(code, origin="wb", destination="wb", warn=FALSE)) |>
  filter(!is.na(code_2))

difference <- paste0("The number of non-country rows: ", count(countries) - count(countries_filtered))

# Print the message
print(difference)
```

## 2.5 Append Continent Column

Use `countrycode()` to append a column containing the continent of each country.

```{r}
#| label: append_continent_column

countries_filtered <- countries_filtered |>
  mutate(continent = countrycode(code, origin="wb", destination="continent", warn=FALSE))

head(countries_filtered)
```

## 2.6 Remove Missing Data

Remove all rows from the `countries` tibble that contain any missing values to prevent ggplot2 from triggering a warning in subsequent tasks.

```{r}
#| label: remove_missing_data

countries_filtered <- countries_filtered |>
  drop_na()

any(is.na(countries_filtered))
```

## 2.7 Count Countries

How many countries are remaining in the `countries` tibble?

```{r}
#| label: count_countries

num_countries <- 
  distinct(countries_filtered, country) |>
  count()

num_countries
```

## 2.8 Prepare Country Labels

A subsequent task requires you to add country names as labels to the plot. To prepare for this task, add a `label` column to the data containing the three-letter codes of the following countries:

- The 10 countries with the highest GDP.

- The 10 countries with the lowest GDP.

- The 10 countries with the longest life expectancy.

- The 10 countries with the shortest life expectancy.

- The 10 most populous countries.

Please note that some countries may be included in multiple categories. For all other countries, the label should be an empty string.

```{r}
#| label: prepare_country_labels

countries_filtered <- countries_filtered |>
  mutate(label = case_when(
    rank(desc(gdp_per_cap)) <= 10 ~ code,
    rank(gdp_per_cap) <= 10 ~ code,
    rank(desc(life_exp)) <= 10 ~ code,
    rank(life_exp) <= 10 ~ code,
    rank(desc(pop)) <= 10 ~ code,
    TRUE ~ ""
  ))

countries_filtered
```

---

# 3 Visualizing the Data

## 3.1 Set Up Basic Plot

As an initial step towards creating a plot similar to Figure 1.2, create a basic plot by using `ggplot()` and a `geom_*()` function to display one bubble per country. Choose suitable aesthetics for the plot and make the bubbles semi-transparent, which is an improvement compared to Gapminder’s approach.

```{r}
#| label: set_up_basic_plot

basic_plot <- ggplot(countries_filtered, aes(x = gdp_per_cap, y = life_exp, size = pop, color = continent)) +
  geom_point(alpha = 0.6)

basic_plot
```

## 3.2 Add Labels

Use `geom_text_repel()` to add the labels from the `label` column of the `countries` tibble. Set the `show.legend` argument equal to `FALSE` to exclude the text layer from the legends.

```{r}
#| label: add_labels

basic_plot <- basic_plot +
  geom_text_repel(aes(label = label), show.legend = FALSE, max.overlaps = Inf)

basic_plot
```

## 3.3 Add Trend Curve

Use `geom_smooth()` to fit a single LOESS curve to all data points in the plot. Set the countries’ population as the weighting variable for the curve. Choose a neutral color for the curve to indicate that it is not specific to any continent.

```{r}
#| label: add_trend_curve

basic_plot <- basic_plot +
  geom_smooth(method = "loess", se = FALSE, color="gray", size=1, aes(weight=pop))

basic_plot
```

## 3.4 Add Annotations

Provide meaningful axis labels, legend labels and a title for the plot. Additionally, include a caption that credits the World Bank as the data source.

```{r}
#| label: add_annotations

basic_plot <- basic_plot +
  labs(
    title = "GDP per Capita vs. Life Expectancy",
    x = "GDP per Capita (US$, PPP 2019)",
    y = "Life Expectancy (years)",
    legend = "Continent",
    size = "Population",
    caption = "Source: World Bank"
  )

basic_plot
```

## 3.5 Change x-Axis Scale

Change the x-coordinates to a logarithmic scale in the plot. Adjust the breaks and minor breaks of the logarithmic scale as shown in figure Figure 1.3 using the `breaks_log()` functions from the scales package. Customize the tick mark labels to be more reader-friendly, such as displaying “1,000” instead of the default “1e+03” format.

```{r}
#| label: change_x_axis_scale

basic_plot <- basic_plot + 
  scale_x_log10(
    breaks = breaks_log(n = 10),
    labels = dollar_format(scale = 1)
  )

basic_plot
```

## 3.6 Change Size Scale

Use `scale_size_area()` to adjust the legend so that the areas of the bubbles represent populations of 1 million, 10 million, 100 million and 1 billion. Modify the labels in the legend from “1e+06”, “1e+07”, “1e+08”, and “1e+09” to more reader-friendly strings like “1M”, “10M”, “100M”, and “1B”. Increase the `max_size` argument to ensure that the bubble areas are approximately the same as in the Gapminder figure.

```{r}
#| label: change_size_scale

basic_plot <- basic_plot +
  scale_size_area(
    labels = c("1M", "10M", "100M", "1B"),
    max_size = 10
  )

basic_plot
```

## 3.7 Change Color Scale

Change the color scale to the ColorBrewer palette “Set1,” which provides clearer contrasts than ggplot2’s default colors. Note that these colors are not the same as those in the Gapminder figure.

```{r}
#| label: change_color_scale

basic_plot <- basic_plot +
  scale_color_brewer(palette = "Set1")

basic_plot
```

## 3.8 Override Transparency in Legend

Semi-transparent colors are effective for addressing overplotting in the bubble plot. However, they are not ideal for the legend, where we want clear color contrasts. Override the alpha aesthetic in the legend to remove transparency. Additionally, increase the sizes of the circles in the color legend to enhance readability. You can refer to section 11.3.6 in Wickham, Navarro and Pedersen (2021) for related examples.

```{r}
#| label: override_transparency_in_legend

basic_plot <- basic_plot +
  guides(
    color = guide_legend(override.aes = list(alpha = 1, size = 5)),
    size = guide_legend(override.aes = list(size = 5))
  )

basic_plot
```

## 3.9 Choose a ggplot2 Theme

Choose a ggplot2 theme and provide arguments to support your choice. There is no definitive right or wrong answer in this case, but you should clearly express your reasoning.

```{r}
#| label: choose_a_ggplot2_theme

basic_plot <- basic_plot + theme_classic()

basic_plot
```

I have tried various theme such as `theme_minimal()`, `theme_light()`, i feel that `theme_classic()` is the best for this plot because the theme removed the coordinates system, which is not necessary for this plot. At the same time, it bolded the axis lines which makes the plot more outstanding. Overall, the looks and feels of the plot is more professional and clean.

## 3.10 Reason About the Data

Write at least four sentences about the data. What does the plot reveal about the data? If you refer to specific countries, make sure to add the corresponding labels in the plot if necessary.

1.  The plot shows a positive correlation between GDP per Capita and Life Expectancy. The trend curve is increasing, which means that countries with higher GDP per Capita tend to have higher life expectancy. 

2.  The size of the bubble represents the population of the country. The larger the bubble, the larger the population. This visualisation provide a clear understanding of how the bubble are portrayed in the plot. 

3.  The color of the bubble represents the continent of the country. The legend on the right shows the color mapping for each continent. 

4.  The plot is based on the data from 2019. The data is sourced from the World Bank.
