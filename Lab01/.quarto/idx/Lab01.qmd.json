{"title":"CSC3107 P2 Lab 1","markdown":{"yaml":{"title":"CSC3107 P2 Lab 1","author":"Loo Siong Yu","format":"html","theme":"lux"},"headingText":"Loading library","containsRefs":false,"markdown":"\n\n```{r}\n#| warning: false\nlibrary(tidyverse)\n```\n\n# Task 2: Aggregating Information about Flights\n## Unzip the folder\n```{r}\n#| warning: false\n#| code-fold: true\nunzip(\"nycflights13_data.zip\")\n```\n\n## Import data\n```{r}\n#| warning: false\n#| code-fold: true\nairlines <- read_csv(\"airlines.csv\")\nairports <- read_csv(\"airports.csv\")\nflights <- read_csv(\"flights.csv\")\nplanes <- read_csv(\"planes.csv\")\nweather <- read_csv(\"weather.csv\")\n```\n\n## 2.2 Rankings of New York City's Main Airports by Number of Destinations Served\nWhat are the rankings of New York Cityâ€™s main airports in terms of the number of destinations served? Include columns for the following attributes in exactly this order:\n\nThree-letter airport code\nAirport name\nNumber of destinations\nRank. The busiest airport is ranked first.1\nSort the results first by rank and, then, alphabetically by the three-letter airport code.\n```{r}\n#| warning: false\n#| code-fold: true\n\nflights |>\n  distinct(origin, dest) |>\n  count(origin, name = \"n_dest\") |>\n  left_join(airports, join_by(\"origin\" == \"faa\")) |>\n  mutate(rank = min_rank(desc(`n_dest`))) |>\n  select(origin, name, n_dest, rank) |>\n  arrange(rank, origin)\n```\n\n## 2.3 Top Ten Destination Airports by Seats\n```{r}\n#| warning: false\n#| code-fold: true\n\nflights |>\n  left_join(planes, join_by(\"tailnum\" == \"tailnum\")) |>\n  # summarize the data by calculating the total no. of seats and grouping the summarized data by dest with the .by, resulting in the total no. of seats assigning to each unique destination\n  summarize(n_seats = sum(seats), .by = dest) |>\n  left_join(airports, join_by(\"dest\" == \"faa\")) |>\n  mutate(rank = min_rank(desc(n_seats))) |>\n  select(dest, name, n_seats, rank) |>\n  arrange(rank, dest) |>\n  filter(rank <= 10)\n```\nNote that all tail numbers and numbers of seats contain no NA:\n```{r}\nanyNA(flights$tailnum) | anyNA(planes$tailnum) | anyNA(planes$seats)\n```\n\n## 2.4 Top Ten Destination Airports Served by Flights from Each New York City Airport\n```{r}\n#| warning: false\n#| code-fold: true\n\nflights |>\n  count(origin, dest, name = \"n_flights\") |>\n  mutate(rank = min_rank(desc(n_flights)), .by = origin) |>\n  filter(rank <= 10) |>\n  left_join(airports, join_by(origin == faa)) |>\n  rename(origin_name = name) |>\n  left_join(airports, join_by(dest == faa)) |>\n  rename(dest_name = name) |>\n  select(origin, origin_name, dest, dest_name, n_flights, rank) |>\n  arrange(origin, rank, dest) |>\n  print(n = Inf)\n```\n\n## 2.5 Rankings of New York City's Main Airports by Mean Departure Delay\n```{r}\n#| warning: false\n#| code-fold: true\n\nflights |>\n  group_by(origin) |>\n  summarize(mean_dep_delay = mean(dep_delay, na.rm = TRUE)) |>\n  mutate(rank = min_rank(mean_dep_delay)) |>\n  left_join(airports, join_by(origin == faa)) |>\n  select(origin, name, mean_dep_delay, rank) |>\n  arrange(rank, origin)\n```\n\n## 2.6 Percentage of On-Time Flights despite Departure Delay\n```{r}\n#| warning: false\n#| code-fold: true\n\non_time_pct <-\n  flights |>\n    drop_na(ends_with(\"delay\")) |>\n    filter(dep_delay >= 30) |>\n    mutate(on_time_arr = arr_delay <= 0) |>\n    count(on_time_arr, name=\"n_flights\") |>\n    mutate(pct = n_flights / sum(n_flights) * 100) |>\n    filter(on_time_arr == TRUE) |>\n    pull(var = pct)\non_time_pct\n```\nHere is a confirmation that the result is a single-element numeric vector:\n```{r}\n#| code-fold: true\nis.numeric(on_time_pct) && length(on_time_pct) == 1\n```\n\n\n## 2.7 On-Time Departure Percentage by Hour of the Day\n```{r}\n#| warning: false\n#| code-fold: true\n\nflights |>\n  drop_na(dep_delay) |>\n  mutate(on_time_dep = dep_delay <= 0) |>\n  count(hour, on_time_dep, name = \"n_flights\") |>\n  group_by(hour) |>\n  mutate(pct_flights = n_flights / sum(n_flights) * 100) |>\n  filter(on_time_dep == TRUE) |>\n  select(hour, pct_flights) |>\n  arrange(hour) |>\n  print(n = Inf)\n```\n\n## 2.8 Planes Operated by Multiple Airlines\n```{r}\n#| warning: false\n#| code-fold: true\n\nflights |>\n  distinct(tailnum, carrier) |>\n  summarize(n_carriers = n(), .by = tailnum) |>\n  filter(n_carriers > 1) |>\n  left_join(planes, join_by(tailnum)) |>\n  select(tailnum, manufacturer, model, n_carriers) |>\n  arrange(tailnum) |>\n  print(n = Inf)\n```\n\n---\n\n# Task 3: Exploring Flights from New York City to Chicago\n## 3.1 Identify Chicago Airports\n```{r}\n#| warning: false\n#| code-fold: true\n\nchicago_aiports <-\n  airports |>\n    filter(str_detect(name, \"Chicago\")) |>\n    select(faa, name)\n\nchicago_aiports\n```\n\n## 3.2 Airlines Serving Chicago from New York City\n```{r}\n#| warning: false\n#| code-fold: true\n\nflights |>\n  left_join(airports, join_by(dest == faa)) |>\n  filter(str_detect(name, \"Chicago\")) |>\n  summarize(n_flights = n(), .by = carrier) |>\n  left_join(airlines, join_by(carrier)) |>\n  mutate(rank = min_rank(desc(n_flights))) |>\n  select(carrier, name, n_flights, rank) |>\n  arrange(rank, carrier)\n```\n**Prof answer** -\n```{r}\n#| warning: false\n#| code-fold: true\n\nflights |>\n  semi_join(chicago_aiports, join_by(dest == faa)) |>\n  count(carrier, name = \"n_flights\") |>\n  left_join(airlines, join_by(carrier)) |>\n  mutate(rank = min_rank(desc(n_flights))) |>\n  select(carrier, name, n_flights, rank) |>\n  arrange(rank, carrier)\n```\n\n## 3.3 On-Time Arrival Percentages by Airline\n```{r}\n#| warning: false\n#| code-fold: true\n\nflights |>\n  semi_join(chicago_aiports, join_by(dest == faa)) |>\n  filter(n() >= 100, .by = carrier) |>\n  mutate(on_time_arr = arr_delay <= 0) |>\n  count(carrier, on_time_arr, name = \"n_flights\") |>\n  mutate(pct = n_flights / sum(n_flights) * 100, .by = carrier) |>\n  filter(on_time_arr == TRUE) |>\n  left_join(airlines, join_by(carrier)) |>\n  mutate(rank = min_rank(desc(pct))) |>\n  select(carrier, name, pct, rank) |>\n  arrange(rank, carrier)\n```\n\n## 3.4 Top Ten Models by Frequency\n```{r}\n#| warning: false\n#| code-fold: true\n\nflights |>\n  semi_join(chicago_aiports, join_by(dest == faa)) |>\n  left_join(planes, join_by(tailnum)) |>\n  count(manufacturer, model, name = \"n_flights\") |>\n  mutate(rank = min_rank(desc(n_flights))) |>\n  slice_min(rank, n = 10) |> # or use filter(rank <= 10)\n  arrange(rank, manufacturer, model)\n```\n\n## 3.5 Top Ten Planes by Mean Speed\n```{r}\n#| warning: false\n#| code-fold: true\n\nflights |>\n  semi_join(chicago_aiports, join_by(dest == faa)) |>\n  mutate(speed_2 = distance / air_time * 60) |>\n  # with at least 10 flights done by the plane\n  filter(n() >= 10, .by = tailnum) |>\n  summarize(mean_speed = mean(speed_2, na.rm = TRUE), .by = tailnum) |>\n  left_join(planes, join_by(tailnum)) |>\n  mutate(rank = min_rank(desc(mean_speed))) |>\n  filter(rank <= 10) |>\n  select(tailnum, manufacturer, model, mean_speed, rank) |>\n  arrange(rank, tailnum)\n```\n\n## 3.6 Were there daily departures in October?\n```{r}\n#| warning: false\n#| code-fold: true\n\ndeparted_daily <-\n  flights |>\n    semi_join(chicago_aiports, join_by(dest == faa)) |>\n    filter(month == 10) |>\n    distinct(day) |>\n    pull() |># this converts the resulting data into a vector\n    as.integer() |> # this converts the original double vector into an integer vector\n    identical(1:31) # this checks if the resulting vector is identical to the integer vector from 1 to 31\n  \ndeparted_daily\n```\n**Note**: Here is confirmation that the result is a single-element logical vector -\n```{r}\n#| code-fold: true\n\nlength(departed_daily) == 1 & is.logical(departed_daily)\n```\n\n---\n\n# Task 4: Uncovering associations between weather and flight operations\n## 4.1 Airport-Hour Combinations Absent from the Weather Table\n```{r}\n#| warning: false\n#| code-fold: true\n\nuniqueComb <-\n  flights |>\n    distinct(origin, time_hour) |>\n    anti_join(weather, join_by(origin, time_hour)) |>\n    count(origin, name = \"n_combination\") |>\n    summarize(sum(n_combination)) |>\n    pull()\n\nuniqueComb\n```\n**Prof ans ** -\n```{r}\n#| code-fold: true\n\nn_absent <-\n  flights |>\n    distinct(origin, time_hour) |>\n    anti_join(weather, join_by(origin, time_hour)) |>\n    nrow()\nn_absent\n```\n**Note**: Here is confirmation that the result is correct length and class\n```{r}\n#| code-fold: true\n\nlength(uniqueComb) == 1 & is.numeric(uniqueComb)\nlength(n_absent) == 1 & is.numeric(n_absent)\n```\n\n## 4.2 On-time Departures by Airport and Precipitation\n```{r}\n#| warning: false\n#| code-fold: true\n\nflights |>\n  left_join(weather, join_by(origin, time_hour)) |>\n  drop_na(precip, dep_delay) |>\n  mutate(is_dry = precip == 0, on_time_dep = dep_delay <= 0) |>\n  count(origin, is_dry, on_time_dep, name = \"n_flights\") |> # count the number of flights by origin, is_dry, and on_time_dep\n  mutate(pct_flights = n_flights / sum(n_flights) * 100, .by = c(origin, is_dry)) |>\n  filter(on_time_dep == TRUE) |>\n  left_join(airports, join_by(origin == faa)) |>\n  select(origin, name, is_dry, pct_flights) |>\n  arrange(origin, desc(is_dry))\n```\n\n## 4.3 Rank Airports by Low-Visibility Departure Delays\n```{r}\n#| warning: false\n#| code-fold: true\n\nflights |>\n  left_join(weather, join_by(origin, time_hour)) |>\n  drop_na(dep_delay) |>\n  filter(visib < 1) |>\n  summarize(mean_dep_delay = mean(dep_delay), .by = origin) |>\n  left_join(airports, join_by(origin == faa)) |>\n  mutate(rank = min_rank(mean_dep_delay)) |>\n  select(origin, name, mean_dep_delay, rank) |>\n  arrange(rank, origin)\n```\n\n## 4.4 Correlation between Temperature and Departure Delay\n```{r}\n#| warning: false\n#| code-fold: true\n\ncorr <-\n  flights |>\n    left_join(weather, join_by(origin, year, month, day, time_hour)) |>\n    drop_na(temp, dep_delay) |>\n    summarize(mean_temp = mean(temp), mean_dep_delay = mean(dep_delay), .by = c(year, month, day)) |>\n    summarize(cor = cor(mean_temp, mean_dep_delay)) |>\n    pull()\n\ncorr\n```\n**Note**: Here is confirmation that corr is a single-element numeric vector - \n```{r}\n#| code-fold: true\n\nlength(corr) == 1 & is.numeric(corr)\n```\n\n","srcMarkdownNoYaml":"\n\n# Loading library\n```{r}\n#| warning: false\nlibrary(tidyverse)\n```\n\n# Task 2: Aggregating Information about Flights\n## Unzip the folder\n```{r}\n#| warning: false\n#| code-fold: true\nunzip(\"nycflights13_data.zip\")\n```\n\n## Import data\n```{r}\n#| warning: false\n#| code-fold: true\nairlines <- read_csv(\"airlines.csv\")\nairports <- read_csv(\"airports.csv\")\nflights <- read_csv(\"flights.csv\")\nplanes <- read_csv(\"planes.csv\")\nweather <- read_csv(\"weather.csv\")\n```\n\n## 2.2 Rankings of New York City's Main Airports by Number of Destinations Served\nWhat are the rankings of New York Cityâ€™s main airports in terms of the number of destinations served? Include columns for the following attributes in exactly this order:\n\nThree-letter airport code\nAirport name\nNumber of destinations\nRank. The busiest airport is ranked first.1\nSort the results first by rank and, then, alphabetically by the three-letter airport code.\n```{r}\n#| warning: false\n#| code-fold: true\n\nflights |>\n  distinct(origin, dest) |>\n  count(origin, name = \"n_dest\") |>\n  left_join(airports, join_by(\"origin\" == \"faa\")) |>\n  mutate(rank = min_rank(desc(`n_dest`))) |>\n  select(origin, name, n_dest, rank) |>\n  arrange(rank, origin)\n```\n\n## 2.3 Top Ten Destination Airports by Seats\n```{r}\n#| warning: false\n#| code-fold: true\n\nflights |>\n  left_join(planes, join_by(\"tailnum\" == \"tailnum\")) |>\n  # summarize the data by calculating the total no. of seats and grouping the summarized data by dest with the .by, resulting in the total no. of seats assigning to each unique destination\n  summarize(n_seats = sum(seats), .by = dest) |>\n  left_join(airports, join_by(\"dest\" == \"faa\")) |>\n  mutate(rank = min_rank(desc(n_seats))) |>\n  select(dest, name, n_seats, rank) |>\n  arrange(rank, dest) |>\n  filter(rank <= 10)\n```\nNote that all tail numbers and numbers of seats contain no NA:\n```{r}\nanyNA(flights$tailnum) | anyNA(planes$tailnum) | anyNA(planes$seats)\n```\n\n## 2.4 Top Ten Destination Airports Served by Flights from Each New York City Airport\n```{r}\n#| warning: false\n#| code-fold: true\n\nflights |>\n  count(origin, dest, name = \"n_flights\") |>\n  mutate(rank = min_rank(desc(n_flights)), .by = origin) |>\n  filter(rank <= 10) |>\n  left_join(airports, join_by(origin == faa)) |>\n  rename(origin_name = name) |>\n  left_join(airports, join_by(dest == faa)) |>\n  rename(dest_name = name) |>\n  select(origin, origin_name, dest, dest_name, n_flights, rank) |>\n  arrange(origin, rank, dest) |>\n  print(n = Inf)\n```\n\n## 2.5 Rankings of New York City's Main Airports by Mean Departure Delay\n```{r}\n#| warning: false\n#| code-fold: true\n\nflights |>\n  group_by(origin) |>\n  summarize(mean_dep_delay = mean(dep_delay, na.rm = TRUE)) |>\n  mutate(rank = min_rank(mean_dep_delay)) |>\n  left_join(airports, join_by(origin == faa)) |>\n  select(origin, name, mean_dep_delay, rank) |>\n  arrange(rank, origin)\n```\n\n## 2.6 Percentage of On-Time Flights despite Departure Delay\n```{r}\n#| warning: false\n#| code-fold: true\n\non_time_pct <-\n  flights |>\n    drop_na(ends_with(\"delay\")) |>\n    filter(dep_delay >= 30) |>\n    mutate(on_time_arr = arr_delay <= 0) |>\n    count(on_time_arr, name=\"n_flights\") |>\n    mutate(pct = n_flights / sum(n_flights) * 100) |>\n    filter(on_time_arr == TRUE) |>\n    pull(var = pct)\non_time_pct\n```\nHere is a confirmation that the result is a single-element numeric vector:\n```{r}\n#| code-fold: true\nis.numeric(on_time_pct) && length(on_time_pct) == 1\n```\n\n\n## 2.7 On-Time Departure Percentage by Hour of the Day\n```{r}\n#| warning: false\n#| code-fold: true\n\nflights |>\n  drop_na(dep_delay) |>\n  mutate(on_time_dep = dep_delay <= 0) |>\n  count(hour, on_time_dep, name = \"n_flights\") |>\n  group_by(hour) |>\n  mutate(pct_flights = n_flights / sum(n_flights) * 100) |>\n  filter(on_time_dep == TRUE) |>\n  select(hour, pct_flights) |>\n  arrange(hour) |>\n  print(n = Inf)\n```\n\n## 2.8 Planes Operated by Multiple Airlines\n```{r}\n#| warning: false\n#| code-fold: true\n\nflights |>\n  distinct(tailnum, carrier) |>\n  summarize(n_carriers = n(), .by = tailnum) |>\n  filter(n_carriers > 1) |>\n  left_join(planes, join_by(tailnum)) |>\n  select(tailnum, manufacturer, model, n_carriers) |>\n  arrange(tailnum) |>\n  print(n = Inf)\n```\n\n---\n\n# Task 3: Exploring Flights from New York City to Chicago\n## 3.1 Identify Chicago Airports\n```{r}\n#| warning: false\n#| code-fold: true\n\nchicago_aiports <-\n  airports |>\n    filter(str_detect(name, \"Chicago\")) |>\n    select(faa, name)\n\nchicago_aiports\n```\n\n## 3.2 Airlines Serving Chicago from New York City\n```{r}\n#| warning: false\n#| code-fold: true\n\nflights |>\n  left_join(airports, join_by(dest == faa)) |>\n  filter(str_detect(name, \"Chicago\")) |>\n  summarize(n_flights = n(), .by = carrier) |>\n  left_join(airlines, join_by(carrier)) |>\n  mutate(rank = min_rank(desc(n_flights))) |>\n  select(carrier, name, n_flights, rank) |>\n  arrange(rank, carrier)\n```\n**Prof answer** -\n```{r}\n#| warning: false\n#| code-fold: true\n\nflights |>\n  semi_join(chicago_aiports, join_by(dest == faa)) |>\n  count(carrier, name = \"n_flights\") |>\n  left_join(airlines, join_by(carrier)) |>\n  mutate(rank = min_rank(desc(n_flights))) |>\n  select(carrier, name, n_flights, rank) |>\n  arrange(rank, carrier)\n```\n\n## 3.3 On-Time Arrival Percentages by Airline\n```{r}\n#| warning: false\n#| code-fold: true\n\nflights |>\n  semi_join(chicago_aiports, join_by(dest == faa)) |>\n  filter(n() >= 100, .by = carrier) |>\n  mutate(on_time_arr = arr_delay <= 0) |>\n  count(carrier, on_time_arr, name = \"n_flights\") |>\n  mutate(pct = n_flights / sum(n_flights) * 100, .by = carrier) |>\n  filter(on_time_arr == TRUE) |>\n  left_join(airlines, join_by(carrier)) |>\n  mutate(rank = min_rank(desc(pct))) |>\n  select(carrier, name, pct, rank) |>\n  arrange(rank, carrier)\n```\n\n## 3.4 Top Ten Models by Frequency\n```{r}\n#| warning: false\n#| code-fold: true\n\nflights |>\n  semi_join(chicago_aiports, join_by(dest == faa)) |>\n  left_join(planes, join_by(tailnum)) |>\n  count(manufacturer, model, name = \"n_flights\") |>\n  mutate(rank = min_rank(desc(n_flights))) |>\n  slice_min(rank, n = 10) |> # or use filter(rank <= 10)\n  arrange(rank, manufacturer, model)\n```\n\n## 3.5 Top Ten Planes by Mean Speed\n```{r}\n#| warning: false\n#| code-fold: true\n\nflights |>\n  semi_join(chicago_aiports, join_by(dest == faa)) |>\n  mutate(speed_2 = distance / air_time * 60) |>\n  # with at least 10 flights done by the plane\n  filter(n() >= 10, .by = tailnum) |>\n  summarize(mean_speed = mean(speed_2, na.rm = TRUE), .by = tailnum) |>\n  left_join(planes, join_by(tailnum)) |>\n  mutate(rank = min_rank(desc(mean_speed))) |>\n  filter(rank <= 10) |>\n  select(tailnum, manufacturer, model, mean_speed, rank) |>\n  arrange(rank, tailnum)\n```\n\n## 3.6 Were there daily departures in October?\n```{r}\n#| warning: false\n#| code-fold: true\n\ndeparted_daily <-\n  flights |>\n    semi_join(chicago_aiports, join_by(dest == faa)) |>\n    filter(month == 10) |>\n    distinct(day) |>\n    pull() |># this converts the resulting data into a vector\n    as.integer() |> # this converts the original double vector into an integer vector\n    identical(1:31) # this checks if the resulting vector is identical to the integer vector from 1 to 31\n  \ndeparted_daily\n```\n**Note**: Here is confirmation that the result is a single-element logical vector -\n```{r}\n#| code-fold: true\n\nlength(departed_daily) == 1 & is.logical(departed_daily)\n```\n\n---\n\n# Task 4: Uncovering associations between weather and flight operations\n## 4.1 Airport-Hour Combinations Absent from the Weather Table\n```{r}\n#| warning: false\n#| code-fold: true\n\nuniqueComb <-\n  flights |>\n    distinct(origin, time_hour) |>\n    anti_join(weather, join_by(origin, time_hour)) |>\n    count(origin, name = \"n_combination\") |>\n    summarize(sum(n_combination)) |>\n    pull()\n\nuniqueComb\n```\n**Prof ans ** -\n```{r}\n#| code-fold: true\n\nn_absent <-\n  flights |>\n    distinct(origin, time_hour) |>\n    anti_join(weather, join_by(origin, time_hour)) |>\n    nrow()\nn_absent\n```\n**Note**: Here is confirmation that the result is correct length and class\n```{r}\n#| code-fold: true\n\nlength(uniqueComb) == 1 & is.numeric(uniqueComb)\nlength(n_absent) == 1 & is.numeric(n_absent)\n```\n\n## 4.2 On-time Departures by Airport and Precipitation\n```{r}\n#| warning: false\n#| code-fold: true\n\nflights |>\n  left_join(weather, join_by(origin, time_hour)) |>\n  drop_na(precip, dep_delay) |>\n  mutate(is_dry = precip == 0, on_time_dep = dep_delay <= 0) |>\n  count(origin, is_dry, on_time_dep, name = \"n_flights\") |> # count the number of flights by origin, is_dry, and on_time_dep\n  mutate(pct_flights = n_flights / sum(n_flights) * 100, .by = c(origin, is_dry)) |>\n  filter(on_time_dep == TRUE) |>\n  left_join(airports, join_by(origin == faa)) |>\n  select(origin, name, is_dry, pct_flights) |>\n  arrange(origin, desc(is_dry))\n```\n\n## 4.3 Rank Airports by Low-Visibility Departure Delays\n```{r}\n#| warning: false\n#| code-fold: true\n\nflights |>\n  left_join(weather, join_by(origin, time_hour)) |>\n  drop_na(dep_delay) |>\n  filter(visib < 1) |>\n  summarize(mean_dep_delay = mean(dep_delay), .by = origin) |>\n  left_join(airports, join_by(origin == faa)) |>\n  mutate(rank = min_rank(mean_dep_delay)) |>\n  select(origin, name, mean_dep_delay, rank) |>\n  arrange(rank, origin)\n```\n\n## 4.4 Correlation between Temperature and Departure Delay\n```{r}\n#| warning: false\n#| code-fold: true\n\ncorr <-\n  flights |>\n    left_join(weather, join_by(origin, year, month, day, time_hour)) |>\n    drop_na(temp, dep_delay) |>\n    summarize(mean_temp = mean(temp), mean_dep_delay = mean(dep_delay), .by = c(year, month, day)) |>\n    summarize(cor = cor(mean_temp, mean_dep_delay)) |>\n    pull()\n\ncorr\n```\n**Note**: Here is confirmation that corr is a single-element numeric vector - \n```{r}\n#| code-fold: true\n\nlength(corr) == 1 & is.numeric(corr)\n```\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"Lab01.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.553","editor":"visual","title":"CSC3107 P2 Lab 1","author":"Loo Siong Yu","theme":"lux"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":[]}